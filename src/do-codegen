#!/usr/bin/env runhaskell

-- todo?: treat subdirs in Transf/

import Control.Applicative
import Data.List
import Data.Maybe
import FUtil
import System.FilePath
import System.Directory

doDir :: FilePath -> IO ([String], [String])
doDir dir = do
  files <- map (reversify $ drop 3) . filter (".hs" `isSuffixOf`) <$>
    getDirectoryContents dir
  return (
    map (\ f -> "import qualified " ++ dir ++ "." ++ f) files,
    map (\ f -> dir ++ "." ++ f ++ ".transfs") files)

dirIfExists :: FilePath -> IO (Maybe FilePath)
dirIfExists dir = doesDirectoryExist dir >>= \ t -> return $ if t
  then Just dir
  else Nothing

main = do
  dirs <- ("Transf":) . maybeToList <$> dirIfExists "TransfPriv"
  (imports, transfs) <- bothond concat . unzip <$> mapM doDir dirs
  writeFile ("CodeGen" </> "Transf.hs") $
    "-- this file is autogenerated\n\
    \module CodeGen.Transf where\n" ++
    unlines imports ++
    "transfs = concat [" ++ intercalate "," transfs ++ "]\n"
